// Code generated by xsdgen.test. DO NOT EDIT.

package ws

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be no more than 255 items long
type Comment string

// May be no more than 180 items long
type Comment1 string

// May be no more than 100 items long
type CustomerSamplePointName string

// May be no more than 36 items long
type CustomersLabSampleRef string

// May be no more than 36 items long
type CustomersLabSampleRefSecondary string

// May be no more than 40 items long
type DepthRelativeTo string

type DepthValueRecorded struct {
	// Depth at which the sample was taken.
	DepthValue float64 `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 DepthValue"`
	// Units for the depth measurement.
	DepthValueUnits DepthValueUnits `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 DepthValueUnits"`
	// What the depth is relative to e.g. surface
	DepthRelativeTo DepthRelativeTo `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 DepthRelativeTo"`
}

// May be no more than 40 items long
type DepthValueUnits string

// May be no more than 200 items long
type DeterminandName string

// Must match the pattern ([a-zA-Z0-9_\.\-])+@((([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,})+|(\[([0-2]?[0-9]{0,2}\.){3}[0-2]?[0-9]{0,2}\]))
type EmailFieldType string

type FileUpload struct {
	// How the return was generated. "CUSTOM" Identifies the fact that a return file is a customer self-generated file as opposed to generated using the EA spreadsheet offline application.
	Source string `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Source"`
	// This element contains the structure of a collection of samples.
	Sample []Sample `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Sample"`
	// Identifies the customer sending the file. This identifier is at the level of the entire customer organisation, not units within one organisation. Must match the RCID for the logged on user.
	RegulatedCustomerIdentifier RegulatedCustomerIdentifier `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 RegulatedCustomerIdentifier"`
	// Customer’s own reference.
	CustomerReference string `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 CustomerReference,omitempty"`
}

// May be no more than 70 items long
type LabName string

// Must match the pattern .*\S+.*
type MandatoryStringType string

// May be no more than 50 items long
type MaterialName string

type Measurement struct {
	// Name for the determinand.
	DeterminandName DeterminandName `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 DeterminandName"`
	// Result type. “N” = No result
	// “E” = A result.
	ResultType ResultType `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 ResultType"`
	// The analysis result amount.
	ResultValue float64 `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 ResultValue,omitempty"`
	// Units of measurement for the result.
	ResultUnits ResultUnits `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 ResultUnits,omitempty"`
	// Shows that the determinand result is over, under or equal to the result value. Valid values are "LT" or "GT"
	Qualifier Qualifier `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Qualifier,omitempty"`
	// Customer comment on sample result e.g. “result thought to be atypical”
	// EA will not be routinely examining the contents of this field so anything likely to require attention should be separately informed to the EA.
	Comment Comment1 `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Comment,omitempty"`
}

// May be no more than 50 items long
type Mechanism string

type PurgedVolumeRecorded struct {
	// Volume removed from the borehole prior to sampling in litres.
	PurgedVolume float64 `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 PurgedVolume"`
	// Units for the purged volume.
	PurgedVolumeUnits PurgedVolumeUnits `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 PurgedVolumeUnits"`
}

// May be no more than 40 items long
type PurgedVolumeUnits string

// May be no more than 50 items long
type PurposeTypeName string

// May be one of LT, GT
type Qualifier string

const (
	Qualifier_LT Qualifier = "LT"
	Qualifier_GT Qualifier = "GT"
)

// May be no more than 20 items long
type RegulatedCustomerIdentifier string

// May be one of E, N
type ResultType string

const (
	ResultType_E ResultType = "E"
	ResultType_N ResultType = "N"
)

// May be no more than 40 items long
type ResultUnits string

type Sample struct {
	// Sampler
	Sampler Sampler `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Sampler,omitempty"`
	// "U" - Update with new value or values for sample
	// "D" - Delete this sample and any associated results
	// "C" - Create new sample
	SampleType SampleType `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 SampleType"`
	// The customer’s name for a sample point.
	CustomerSamplePointName CustomerSamplePointName `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 CustomerSamplePointName"`
	// Sample date time. Must be to the nearest minute.
	SampleDateTime time.Time `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 SampleDateTime"`
	// The customer's name for the purpose for which the sample was taken.
	PurposeTypeName PurposeTypeName `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 PurposeTypeName"`
	// The customer's name of the material.
	MaterialName MaterialName `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 MaterialName"`
	// The customer's name for the method used to take the sample.
	Mechanism Mechanism `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Mechanism"`
	// Unique within customer reference code for the sample analysis as used by the laboratory that analysed the sample.
	CustomersLabSampleRef CustomersLabSampleRef `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 CustomersLabSampleRef"`
	// Additional customer reference codes for the sample analysis as used by the laboratory that analysed the sample.
	CustomersLabSampleRefSecondary []CustomersLabSampleRefSecondary `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 CustomersLabSampleRefSecondary,omitempty"`
	// Comments on the sample, EA will not be routinely examining the contents of this field so anything likely to require attention should be separately communicated to the EA.
	Comment Comment `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Comment,omitempty"`
	// Name of the laboratory that analysed the sample.
	LabName LabName `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 LabName"`
	// Date sample was analysed in the lab.
	AnalysisCompleteDateTime time.Time `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 AnalysisCompleteDateTime"`
	// An optional collection of elements relating to recorded sample depth.
	DepthValueRecorded *DepthValueRecorded `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 DepthValueRecorded,omitempty"`
	// An optional collection of elements relating to recorded sample volume.
	PurgedVolumeRecorded *PurgedVolumeRecorded `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 PurgedVolumeRecorded,omitempty"`
	// This repeating element contains the structure of a Water Quality measurement.
	Measurement []Measurement `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 Measurement"`
}

func (t *Sample) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Sample
	var overlay struct {
		*T
		SampleDateTime           *xsdDateTime `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 SampleDateTime"`
		AnalysisCompleteDateTime *xsdDateTime `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 AnalysisCompleteDateTime"`
	}
	overlay.T = (*T)(t)
	overlay.SampleDateTime = (*xsdDateTime)(&overlay.T.SampleDateTime)
	overlay.AnalysisCompleteDateTime = (*xsdDateTime)(&overlay.T.AnalysisCompleteDateTime)
	return d.DecodeElement(&overlay, &start)
}
func (t Sample) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Sample
	var layout struct {
		*T
		SampleDateTime           *xsdDateTime `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 SampleDateTime"`
		AnalysisCompleteDateTime *xsdDateTime `xml:"http://www.environment-agency.gov.uk/XMLSchemas/GOR/WaterQualityMultiReturn/01 AnalysisCompleteDateTime"`
	}
	layout.T = (*T)(&t)
	layout.SampleDateTime = (*xsdDateTime)(&layout.T.SampleDateTime)
	layout.AnalysisCompleteDateTime = (*xsdDateTime)(&layout.T.AnalysisCompleteDateTime)
	return e.EncodeElement(layout, start)
}

// May be one of C, D, U
type SampleType string

const (
	SampleType_C SampleType = "C"
	SampleType_D SampleType = "D"
	SampleType_U SampleType = "U"
)

// May be no more than 8 items long
type Sampler string

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
